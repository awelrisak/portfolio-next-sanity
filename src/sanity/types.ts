/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

export declare const internalGroqTypeReferenceTo: unique symbol;

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Callout = {
  _type: "callout";
  type: "success" | "info" | "warning" | "destructive";
  title?: string;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type CustomCode = {
  _type: "customCode";
  code?: Code;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  caption?: string;
  alt?: string;
  _type: "customImage";
  _key: string;
} | ({
  _key: string;
} & CustomCode) | ({
  _key: string;
} & Callout)>;

export type Portfolio = {
  _id: string;
  _type: "portfolio";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hero?: Portfolio_hero;
  title?: string;
  text?: string;
};

export type Portfolio_hero = {
  _type: "portfolio_hero";
  greeting: string;
  firstName: string;
  lastName: string;
  description: string;
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "customImage";
  };
  twitter?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  excerpt: string;
  keywords?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "customImage";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  author: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  publishedAt: string;
  body: RichText;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
};

export type CustomImage = {
  _type: "customImage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  caption?: string;
  alt?: string;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Featured = {
  _id: string;
  _type: "featured";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  posts: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "post";
  }>;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Callout | CustomCode | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | RichText | Portfolio | Portfolio_hero | Tag | Author | Post | Category | CustomImage | Slug | Featured | Code;

// Source: ./src/app/blog/page.tsx
// Variable: blogPageQuery
// Query:      {      "featuredPosts": *[_type == "featured"][0].posts[]->{         "slug": slug.current,          title,          "image": coverImage.asset->url,          excerpt,         "plainText": pt::text(body),         publishedAt      },      "latestPosts": *[          _type == "post"          && !(_id in *[_type == "featured"][0].posts[]->._id)          ][0..5] | order(publishedAt desc){            "slug": slug.current,            title,          "image": coverImage.asset->url,            excerpt,            "plainText": pt::text(body),            publishedAt      }    }  
export type BlogPageQueryResult = {
  featuredPosts: Array<{
    slug: string;
    title: string;
    image: string | null;
    excerpt: string;
    plainText: string;
    publishedAt: string;
  }> | null;
  latestPosts: Array<{
    slug: string;
    title: string;
    image: string | null;
    excerpt: string;
    plainText: string;
    publishedAt: string;
  }>;
};
// Source: ./src/app/blog/[slug]/page.tsx
// Variable: postPageQuery
// Query:   *[_type == "post" && slug.current == $slug][0]{    _id,    title,    "slug": slug.current,    "coverImage": coverImage.asset->url,    publishedAt,    excerpt,    "headings": body[style in ["h2", "h3", "h4", "h5", "h6"]],    body,    category-> {      name,      "slug": slug.current    },    tags[]->{      "slug": slug.current,      name    },    author[]->{      name,      twitter,      "image": image.asset->url,      "slug": slug.current    },    "plainText": pt::text(body),    "keywords": string::split(keywords, ","),    _updatedAt,    "relatedPosts": *[      _type == "post"      && _id != ^._id       && count(tags[@._ref in ^.^.tags[]._ref]) > 0    ]{      title,      "slug": slug.current,      "coverImage": coverImage.asset->url,      publishedAt,      "plainText": pt::text(body)    },    "recentPosts": *[      _type == "post"       && _id != ^._id      && !(_id in *[          _type == "post"          && _id != ^.^._id           && count(tags[@._ref in ^.^.^.tags[]._ref]) > 0        ]._id)      ] | order(publishedAt desc)[0..5]{      title,      "slug": slug.current,      "coverImage": coverImage.asset->url,      publishedAt,      "plainText": pt::text(body)    }  }  
export type PostPageQueryResult = {
  _id: string;
  title: string;
  slug: string;
  coverImage: string | null;
  publishedAt: string;
  excerpt: string;
  headings: Array<never>;
  body: RichText;
  category: {
    name: string;
    slug: string;
  } | null;
  tags: Array<{
    slug: string;
    name: string;
  }> | null;
  author: Array<{
    name: string;
    twitter: string | null;
    image: string | null;
    slug: string;
  }>;
  plainText: string;
  keywords: Array<string> | null;
  _updatedAt: string;
  relatedPosts: Array<{
    title: string;
    slug: string;
    coverImage: string | null;
    publishedAt: string;
    plainText: string;
  }>;
  recentPosts: Array<{
    title: string;
    slug: string;
    coverImage: string | null;
    publishedAt: string;
    plainText: string;
  }>;
} | null;
